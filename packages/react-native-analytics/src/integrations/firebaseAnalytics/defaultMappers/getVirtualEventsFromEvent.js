import eventTypes from '../../../eventTypes';
import VirtualEventTypes from './virtualEventTypes';

/**
 * Returns virtual events to track from the 'PRODUCT_UPDATED' event, which can trigger
 * multiple events to Firebase, depending on the event payload.
 *
 * @param {object} data - Event data provided by analytics.
 *
 * @returns List of virtual events which will need to be triggered.
 */
const getProductUpdatedVirtualEvents = data => {
  const eventProperties = data.properties;
  const productUpdatedVirtualEvents = [];

  if (
    eventProperties.quantity &&
    eventProperties.oldQuantity !== eventProperties.quantity
  ) {
    productUpdatedVirtualEvents.push({
      ...data,
      event: VirtualEventTypes.PRODUCT_UPDATED.CHANGE_QUANTITY,
    });
  }

  if (
    eventProperties.size &&
    eventProperties.oldSize !== eventProperties.size
  ) {
    productUpdatedVirtualEvents.push({
      ...data,
      event: VirtualEventTypes.PRODUCT_UPDATED.CHANGE_SIZE,
    });
  }

  if (
    eventProperties.colour &&
    eventProperties.oldColour !== eventProperties.colour
  ) {
    productUpdatedVirtualEvents.push({
      ...data,
      event: VirtualEventTypes.PRODUCT_UPDATED.CHANGE_COLOUR,
    });
  }

  return productUpdatedVirtualEvents;
};

/**
 * Returns the list of virtual events that are generated by the event
 * data passed as argument, if any.
 *
 * @param {object} data - Event data provided by analytics.
 * @returns {(Array<object>|undefined)} An array of virtual event data if any are generated, else undefined.
 */
export default function getVirtualEventsFromEvent(data) {
  const event = data.event;

  if (event === eventTypes.PRODUCT_UPDATED) {
    return getProductUpdatedVirtualEvents(data);
  }
}
